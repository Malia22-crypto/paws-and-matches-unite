/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdoptionRequestService } from "../adoptionRequest.service";
import { Public } from "../../decorators/public.decorator";
import { AdoptionRequestCreateInput } from "./AdoptionRequestCreateInput";
import { AdoptionRequest } from "./AdoptionRequest";
import { AdoptionRequestFindManyArgs } from "./AdoptionRequestFindManyArgs";
import { AdoptionRequestWhereUniqueInput } from "./AdoptionRequestWhereUniqueInput";
import { AdoptionRequestUpdateInput } from "./AdoptionRequestUpdateInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

export class AdoptionRequestControllerBase {
  constructor(protected readonly service: AdoptionRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdoptionRequest })
  async createAdoptionRequest(
    @common.Body() data: AdoptionRequestCreateInput
  ): Promise<AdoptionRequest> {
    return await this.service.createAdoptionRequest({
      data: {
        ...data,

        pet: {
          connect: data.pet,
        },
      },
      select: {
        createdAt: true,
        id: true,
        message: true,

        pet: {
          select: {
            id: true,
          },
        },

        requestedOn: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdoptionRequest] })
  @ApiNestedQuery(AdoptionRequestFindManyArgs)
  async adoptionRequests(
    @common.Req() request: Request
  ): Promise<AdoptionRequest[]> {
    const args = plainToClass(AdoptionRequestFindManyArgs, request.query);
    return this.service.adoptionRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,

        pet: {
          select: {
            id: true,
          },
        },

        requestedOn: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdoptionRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adoptionRequest(
    @common.Param() params: AdoptionRequestWhereUniqueInput
  ): Promise<AdoptionRequest | null> {
    const result = await this.service.adoptionRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,

        pet: {
          select: {
            id: true,
          },
        },

        requestedOn: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdoptionRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdoptionRequest(
    @common.Param() params: AdoptionRequestWhereUniqueInput,
    @common.Body() data: AdoptionRequestUpdateInput
  ): Promise<AdoptionRequest | null> {
    try {
      return await this.service.updateAdoptionRequest({
        where: params,
        data: {
          ...data,

          pet: {
            connect: data.pet,
          },
        },
        select: {
          createdAt: true,
          id: true,
          message: true,

          pet: {
            select: {
              id: true,
            },
          },

          requestedOn: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdoptionRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdoptionRequest(
    @common.Param() params: AdoptionRequestWhereUniqueInput
  ): Promise<AdoptionRequest | null> {
    try {
      return await this.service.deleteAdoptionRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,

          pet: {
            select: {
              id: true,
            },
          },

          requestedOn: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @common.Get("/:id/adopter")
  @ApiNestedQuery(UserFindManyArgs)
  async findAdopter(
    @common.Req() request: Request,
    @common.Param() params: AdoptionRequestWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findAdopter(params.id, {
      ...query,
      select: {
        adoptionRequests: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        email: true,
        firstName: true,
        id: true,

        lostAndFoundReports: {
          select: {
            id: true,
          },
        },

        pets: {
          select: {
            id: true,
          },
        },

        phonenumber: true,
        profilePicture: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/adopter")
  async connectAdopter(
    @common.Param() params: AdoptionRequestWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adopter: {
        connect: body,
      },
    };
    await this.service.updateAdoptionRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/adopter")
  async updateAdopter(
    @common.Param() params: AdoptionRequestWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adopter: {
        set: body,
      },
    };
    await this.service.updateAdoptionRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/adopter")
  async disconnectAdopter(
    @common.Param() params: AdoptionRequestWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adopter: {
        disconnect: body,
      },
    };
    await this.service.updateAdoptionRequest({
      where: params,
      data,
      select: { id: true },
    });
  }
}
