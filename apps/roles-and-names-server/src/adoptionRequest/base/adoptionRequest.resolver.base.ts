/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { AdoptionRequest } from "./AdoptionRequest";
import { AdoptionRequestCountArgs } from "./AdoptionRequestCountArgs";
import { AdoptionRequestFindManyArgs } from "./AdoptionRequestFindManyArgs";
import { AdoptionRequestFindUniqueArgs } from "./AdoptionRequestFindUniqueArgs";
import { CreateAdoptionRequestArgs } from "./CreateAdoptionRequestArgs";
import { UpdateAdoptionRequestArgs } from "./UpdateAdoptionRequestArgs";
import { DeleteAdoptionRequestArgs } from "./DeleteAdoptionRequestArgs";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { Pet } from "../../pet/base/Pet";
import { AdoptionRequestService } from "../adoptionRequest.service";
@graphql.Resolver(() => AdoptionRequest)
export class AdoptionRequestResolverBase {
  constructor(protected readonly service: AdoptionRequestService) {}

  async _adoptionRequestsMeta(
    @graphql.Args() args: AdoptionRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AdoptionRequest])
  async adoptionRequests(
    @graphql.Args() args: AdoptionRequestFindManyArgs
  ): Promise<AdoptionRequest[]> {
    return this.service.adoptionRequests(args);
  }

  @graphql.Query(() => AdoptionRequest, { nullable: true })
  async adoptionRequest(
    @graphql.Args() args: AdoptionRequestFindUniqueArgs
  ): Promise<AdoptionRequest | null> {
    const result = await this.service.adoptionRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AdoptionRequest)
  async createAdoptionRequest(
    @graphql.Args() args: CreateAdoptionRequestArgs
  ): Promise<AdoptionRequest> {
    return await this.service.createAdoptionRequest({
      ...args,
      data: {
        ...args.data,

        pet: {
          connect: args.data.pet,
        },
      },
    });
  }

  @graphql.Mutation(() => AdoptionRequest)
  async updateAdoptionRequest(
    @graphql.Args() args: UpdateAdoptionRequestArgs
  ): Promise<AdoptionRequest | null> {
    try {
      return await this.service.updateAdoptionRequest({
        ...args,
        data: {
          ...args.data,

          pet: {
            connect: args.data.pet,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdoptionRequest)
  async deleteAdoptionRequest(
    @graphql.Args() args: DeleteAdoptionRequestArgs
  ): Promise<AdoptionRequest | null> {
    try {
      return await this.service.deleteAdoptionRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [User], { name: "adopter" })
  async findAdopter(
    @graphql.Parent() parent: AdoptionRequest,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findAdopter(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Pet, {
    nullable: true,
    name: "pet",
  })
  async getPet(@graphql.Parent() parent: AdoptionRequest): Promise<Pet | null> {
    const result = await this.service.getPet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
