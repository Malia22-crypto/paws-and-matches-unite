/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AiMatch } from "./AiMatch";
import { AiMatchCountArgs } from "./AiMatchCountArgs";
import { AiMatchFindManyArgs } from "./AiMatchFindManyArgs";
import { AiMatchFindUniqueArgs } from "./AiMatchFindUniqueArgs";
import { CreateAiMatchArgs } from "./CreateAiMatchArgs";
import { UpdateAiMatchArgs } from "./UpdateAiMatchArgs";
import { DeleteAiMatchArgs } from "./DeleteAiMatchArgs";
import { LostAndFoundReport } from "../../lostAndFoundReport/base/LostAndFoundReport";
import { Pet } from "../../pet/base/Pet";
import { AiMatchService } from "../aiMatch.service";
@graphql.Resolver(() => AiMatch)
export class AiMatchResolverBase {
  constructor(protected readonly service: AiMatchService) {}

  async _aiMatchesMeta(
    @graphql.Args() args: AiMatchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AiMatch])
  async aiMatches(
    @graphql.Args() args: AiMatchFindManyArgs
  ): Promise<AiMatch[]> {
    return this.service.aiMatches(args);
  }

  @graphql.Query(() => AiMatch, { nullable: true })
  async aiMatch(
    @graphql.Args() args: AiMatchFindUniqueArgs
  ): Promise<AiMatch | null> {
    const result = await this.service.aiMatch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AiMatch)
  async createAiMatch(
    @graphql.Args() args: CreateAiMatchArgs
  ): Promise<AiMatch> {
    return await this.service.createAiMatch({
      ...args,
      data: {
        ...args.data,

        lostReport: {
          connect: args.data.lostReport,
        },

        matchedPet: {
          connect: args.data.matchedPet,
        },
      },
    });
  }

  @graphql.Mutation(() => AiMatch)
  async updateAiMatch(
    @graphql.Args() args: UpdateAiMatchArgs
  ): Promise<AiMatch | null> {
    try {
      return await this.service.updateAiMatch({
        ...args,
        data: {
          ...args.data,

          lostReport: {
            connect: args.data.lostReport,
          },

          matchedPet: {
            connect: args.data.matchedPet,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiMatch)
  async deleteAiMatch(
    @graphql.Args() args: DeleteAiMatchArgs
  ): Promise<AiMatch | null> {
    try {
      return await this.service.deleteAiMatch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => LostAndFoundReport, {
    nullable: true,
    name: "lostReport",
  })
  async getLostReport(
    @graphql.Parent() parent: AiMatch
  ): Promise<LostAndFoundReport | null> {
    const result = await this.service.getLostReport(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Pet, {
    nullable: true,
    name: "matchedPet",
  })
  async getMatchedPet(@graphql.Parent() parent: AiMatch): Promise<Pet | null> {
    const result = await this.service.getMatchedPet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
