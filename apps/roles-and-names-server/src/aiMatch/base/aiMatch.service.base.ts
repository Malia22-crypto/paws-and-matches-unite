/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AiMatch as PrismaAiMatch,
  LostAndFoundReport as PrismaLostAndFoundReport,
  Pet as PrismaPet,
} from "@prisma/client";

export class AiMatchServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AiMatchCountArgs, "select">): Promise<number> {
    return this.prisma.aiMatch.count(args);
  }

  async aiMatches(args: Prisma.AiMatchFindManyArgs): Promise<PrismaAiMatch[]> {
    return this.prisma.aiMatch.findMany(args);
  }
  async aiMatch(
    args: Prisma.AiMatchFindUniqueArgs
  ): Promise<PrismaAiMatch | null> {
    return this.prisma.aiMatch.findUnique(args);
  }
  async createAiMatch(args: Prisma.AiMatchCreateArgs): Promise<PrismaAiMatch> {
    return this.prisma.aiMatch.create(args);
  }
  async updateAiMatch(args: Prisma.AiMatchUpdateArgs): Promise<PrismaAiMatch> {
    return this.prisma.aiMatch.update(args);
  }
  async deleteAiMatch(args: Prisma.AiMatchDeleteArgs): Promise<PrismaAiMatch> {
    return this.prisma.aiMatch.delete(args);
  }

  async getLostReport(
    parentId: string
  ): Promise<PrismaLostAndFoundReport | null> {
    return this.prisma.aiMatch
      .findUnique({
        where: { id: parentId },
      })
      .lostReport();
  }

  async getMatchedPet(parentId: string): Promise<PrismaPet | null> {
    return this.prisma.aiMatch
      .findUnique({
        where: { id: parentId },
      })
      .matchedPet();
  }
}
