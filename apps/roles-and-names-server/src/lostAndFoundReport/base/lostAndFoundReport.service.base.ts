/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LostAndFoundReport as PrismaLostAndFoundReport,
  AiMatch as PrismaAiMatch,
  User as PrismaUser,
} from "@prisma/client";

export class LostAndFoundReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LostAndFoundReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.lostAndFoundReport.count(args);
  }

  async lostAndFoundReports(
    args: Prisma.LostAndFoundReportFindManyArgs
  ): Promise<PrismaLostAndFoundReport[]> {
    return this.prisma.lostAndFoundReport.findMany(args);
  }
  async lostAndFoundReport(
    args: Prisma.LostAndFoundReportFindUniqueArgs
  ): Promise<PrismaLostAndFoundReport | null> {
    return this.prisma.lostAndFoundReport.findUnique(args);
  }
  async createLostAndFoundReport(
    args: Prisma.LostAndFoundReportCreateArgs
  ): Promise<PrismaLostAndFoundReport> {
    return this.prisma.lostAndFoundReport.create(args);
  }
  async updateLostAndFoundReport(
    args: Prisma.LostAndFoundReportUpdateArgs
  ): Promise<PrismaLostAndFoundReport> {
    return this.prisma.lostAndFoundReport.update(args);
  }
  async deleteLostAndFoundReport(
    args: Prisma.LostAndFoundReportDeleteArgs
  ): Promise<PrismaLostAndFoundReport> {
    return this.prisma.lostAndFoundReport.delete(args);
  }

  async getAiMatches(parentId: string): Promise<PrismaAiMatch | null> {
    return this.prisma.lostAndFoundReport
      .findUnique({
        where: { id: parentId },
      })
      .aiMatches();
  }

  async getReportedBy(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.lostAndFoundReport
      .findUnique({
        where: { id: parentId },
      })
      .reportedBy();
  }
}
