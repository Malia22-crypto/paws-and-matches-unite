/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LostAndFoundReport } from "./LostAndFoundReport";
import { LostAndFoundReportCountArgs } from "./LostAndFoundReportCountArgs";
import { LostAndFoundReportFindManyArgs } from "./LostAndFoundReportFindManyArgs";
import { LostAndFoundReportFindUniqueArgs } from "./LostAndFoundReportFindUniqueArgs";
import { CreateLostAndFoundReportArgs } from "./CreateLostAndFoundReportArgs";
import { UpdateLostAndFoundReportArgs } from "./UpdateLostAndFoundReportArgs";
import { DeleteLostAndFoundReportArgs } from "./DeleteLostAndFoundReportArgs";
import { AiMatch } from "../../aiMatch/base/AiMatch";
import { User } from "../../user/base/User";
import { LostAndFoundReportService } from "../lostAndFoundReport.service";
@graphql.Resolver(() => LostAndFoundReport)
export class LostAndFoundReportResolverBase {
  constructor(protected readonly service: LostAndFoundReportService) {}

  async _lostAndFoundReportsMeta(
    @graphql.Args() args: LostAndFoundReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LostAndFoundReport])
  async lostAndFoundReports(
    @graphql.Args() args: LostAndFoundReportFindManyArgs
  ): Promise<LostAndFoundReport[]> {
    return this.service.lostAndFoundReports(args);
  }

  @graphql.Query(() => LostAndFoundReport, { nullable: true })
  async lostAndFoundReport(
    @graphql.Args() args: LostAndFoundReportFindUniqueArgs
  ): Promise<LostAndFoundReport | null> {
    const result = await this.service.lostAndFoundReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LostAndFoundReport)
  async createLostAndFoundReport(
    @graphql.Args() args: CreateLostAndFoundReportArgs
  ): Promise<LostAndFoundReport> {
    return await this.service.createLostAndFoundReport({
      ...args,
      data: {
        ...args.data,

        aiMatches: args.data.aiMatches
          ? {
              connect: args.data.aiMatches,
            }
          : undefined,

        reportedBy: args.data.reportedBy
          ? {
              connect: args.data.reportedBy,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LostAndFoundReport)
  async updateLostAndFoundReport(
    @graphql.Args() args: UpdateLostAndFoundReportArgs
  ): Promise<LostAndFoundReport | null> {
    try {
      return await this.service.updateLostAndFoundReport({
        ...args,
        data: {
          ...args.data,

          aiMatches: args.data.aiMatches
            ? {
                connect: args.data.aiMatches,
              }
            : undefined,

          reportedBy: args.data.reportedBy
            ? {
                connect: args.data.reportedBy,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LostAndFoundReport)
  async deleteLostAndFoundReport(
    @graphql.Args() args: DeleteLostAndFoundReportArgs
  ): Promise<LostAndFoundReport | null> {
    try {
      return await this.service.deleteLostAndFoundReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => AiMatch, {
    nullable: true,
    name: "aiMatches",
  })
  async getAiMatches(
    @graphql.Parent() parent: LostAndFoundReport
  ): Promise<AiMatch | null> {
    const result = await this.service.getAiMatches(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "reportedBy",
  })
  async getReportedBy(
    @graphql.Parent() parent: LostAndFoundReport
  ): Promise<User | null> {
    const result = await this.service.getReportedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
