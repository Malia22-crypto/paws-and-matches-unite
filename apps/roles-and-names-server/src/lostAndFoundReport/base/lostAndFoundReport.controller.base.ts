/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LostAndFoundReportService } from "../lostAndFoundReport.service";
import { LostAndFoundReportCreateInput } from "./LostAndFoundReportCreateInput";
import { LostAndFoundReport } from "./LostAndFoundReport";
import { LostAndFoundReportFindManyArgs } from "./LostAndFoundReportFindManyArgs";
import { LostAndFoundReportWhereUniqueInput } from "./LostAndFoundReportWhereUniqueInput";
import { LostAndFoundReportUpdateInput } from "./LostAndFoundReportUpdateInput";

export class LostAndFoundReportControllerBase {
  constructor(protected readonly service: LostAndFoundReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LostAndFoundReport })
  async createLostAndFoundReport(
    @common.Body() data: LostAndFoundReportCreateInput
  ): Promise<LostAndFoundReport> {
    return await this.service.createLostAndFoundReport({
      data: {
        ...data,

        aiMatches: data.aiMatches
          ? {
              connect: data.aiMatches,
            }
          : undefined,

        reportedBy: data.reportedBy
          ? {
              connect: data.reportedBy,
            }
          : undefined,
      },
      select: {
        aiMatches: {
          select: {
            id: true,
          },
        },

        contactInfo: true,
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        location: true,
        petName: true,
        petType: true,
        reportType: true,

        reportedBy: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LostAndFoundReport] })
  @ApiNestedQuery(LostAndFoundReportFindManyArgs)
  async lostAndFoundReports(
    @common.Req() request: Request
  ): Promise<LostAndFoundReport[]> {
    const args = plainToClass(LostAndFoundReportFindManyArgs, request.query);
    return this.service.lostAndFoundReports({
      ...args,
      select: {
        aiMatches: {
          select: {
            id: true,
          },
        },

        contactInfo: true,
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        location: true,
        petName: true,
        petType: true,
        reportType: true,

        reportedBy: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LostAndFoundReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async lostAndFoundReport(
    @common.Param() params: LostAndFoundReportWhereUniqueInput
  ): Promise<LostAndFoundReport | null> {
    const result = await this.service.lostAndFoundReport({
      where: params,
      select: {
        aiMatches: {
          select: {
            id: true,
          },
        },

        contactInfo: true,
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        location: true,
        petName: true,
        petType: true,
        reportType: true,

        reportedBy: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LostAndFoundReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLostAndFoundReport(
    @common.Param() params: LostAndFoundReportWhereUniqueInput,
    @common.Body() data: LostAndFoundReportUpdateInput
  ): Promise<LostAndFoundReport | null> {
    try {
      return await this.service.updateLostAndFoundReport({
        where: params,
        data: {
          ...data,

          aiMatches: data.aiMatches
            ? {
                connect: data.aiMatches,
              }
            : undefined,

          reportedBy: data.reportedBy
            ? {
                connect: data.reportedBy,
              }
            : undefined,
        },
        select: {
          aiMatches: {
            select: {
              id: true,
            },
          },

          contactInfo: true,
          createdAt: true,
          description: true,
          id: true,
          imageUrl: true,
          location: true,
          petName: true,
          petType: true,
          reportType: true,

          reportedBy: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LostAndFoundReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLostAndFoundReport(
    @common.Param() params: LostAndFoundReportWhereUniqueInput
  ): Promise<LostAndFoundReport | null> {
    try {
      return await this.service.deleteLostAndFoundReport({
        where: params,
        select: {
          aiMatches: {
            select: {
              id: true,
            },
          },

          contactInfo: true,
          createdAt: true,
          description: true,
          id: true,
          imageUrl: true,
          location: true,
          petName: true,
          petType: true,
          reportType: true,

          reportedBy: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
